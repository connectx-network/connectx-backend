// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @unique @default(uuid())
  email                  String?                 @unique
  password               String?
  telegramId             String                  @unique @map("telegram_id")
  telegramUsername       String?                 @map("telegram_username")
  fullName               String                  @map("full_name")
  shortId                String?                 @unique @map("short_id")
  nickname               String?
  // Raw ton address
  tonRawAddress          String?                 @map("ton_raw_address")
  // Solana adress
  solanaAddress          String?                 @map("solana_address")
  description            String?
  phoneNumber            String?                 @map("phone_number")
  company                String?
  jobTitle               String?                 @map("job_title")
  gender                 Gender?
  address                String?
  avatarUrl              String?                 @map("avatar_url")
  linkedInUrl            String?                 @map("link_in_url")
  twitterUrl             String?                 @map("twitter_url")
  companyUrl             String?                 @map("company_url")
  isPrivate              Boolean                 @default(false) @map("is_private")
  isPrivateFeeds         Boolean                 @default(false) @map("is_private_feeds")
  isDeleted              Boolean                 @default(false) @map("is_deleted")
  activated              Boolean                 @default(false)
  userRole               UserRole                @default(USER)
  userCategories         UserCategory[]
  userImages             UserImage[]
  following              UserConnection[]        @relation("user-to-target")
  followers              UserConnection[]        @relation("target-to-user")
  joinedEventUsers       JoinedEventUser[]
  userVerification       UserVerification?
  userTokens             UserToken[]
  sentNotifications      Notification[]          @relation("SenderToReceiver")
  receivedNotifications  Notification[]          @relation("ReceiverToSender")
  joinedEventPhaseUsers  JoinedEventPhaseUser[]
  events                 Event[]
  eventHosts             EventHost[]
  userCities             UserCity[]
  userEventFavorites     UserEventFavorite[]
  userSocials            UserSocial[]
  eventFeedbacks         EventFeedback[]
  eventViews             EventView[]
  nftItems               NftItem[]
  royaltySolanaTokenLogs RoyaltySolanaTokenLog[]

  @@map("user")
}

model UserSocial {
  id     String @id @unique @default(uuid())
  url    String @map("url")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_social")
}

model City {
  id            String      @id @unique @default(uuid())
  name          String      @unique
  country       String
  latitude      Float
  longitude     Float
  image         String?
  isHighlighted Boolean     @default(false) @map("is_highlighted")
  userCities    UserCity[]
  eventCities   EventCity[]
  event         Event[]
  eventViews    EventView[]

  @@map("city")
}

model UserCity {
  id     String @id @unique @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([userId, cityId])
  @@map("user_city")
}

model EventCity {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  cityId  String @map("city_id")
  city    City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@map("event_city")
}

model UserToken {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  deviceToken  String?  @map("device_token")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model UserVerification {
  id          String       @id @unique @default(uuid())
  userId      String       @unique @map("user_id")
  verifyCode  String       @unique @map("verify_code")
  expiredDate DateTime     @map("expired_date")
  type        UserCodeType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("user_verification ")
}

model UserCategory {
  id         String   @id @unique @default(uuid())
  categoryId String   @map("interest_id")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_category")
}

model UserImage {
  id     String @id @unique @default(uuid())
  url    String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_image")
}

model UserConnection {
  id         String   @id @unique @default(uuid())
  userId     String   @map("user_id")
  targetId   String   @map("target_id")
  accepted   Boolean  @default(false)
  followDate DateTime @default(now()) @map("follow_date")
  following  User     @relation("user-to-target", fields: [userId], references: [id], onDelete: Cascade)
  follower   User     @relation("target-to-user", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId])
  @@map("user_connection")
}

model Category {
  id           String         @id @unique @default(uuid())
  name         String
  events       Event[]
  UserCategory UserCategory[]

  @@map("category")
}

model Event {
  id                    String                 @id @unique @default(uuid())
  title                 String
  description           String?
  content               String?
  shortId               String                 @unique
  ticketPrice           Float                  @default(0) @map("tiket_price")
  numberOfTicket        Int?                   @map("number_of_tickets")
  ticketType            TicketType             @default(FREE) @map("ticket_type")
  createdAt             DateTime               @default(now()) @map("created_at")
  eventDate             DateTime               @map("event_date")
  eventEndDate          DateTime               @map("event_end_date")
  location              String?                @map("location")
  mapsUrl               String?                @map("maps_url")
  eventType             EventType              @default(NORMAL) @map("event_type")
  eventScope            EventScope             @default(PUBLIC) @map("event_scope")
  registUrl             String?                @map("regist_url")
  isHighlighted         Boolean                @default(false) @map("is_highlighted")
  isDeleted             Boolean                @default(false) @map("is_deleted")
  cityId                String?                @map("city_id")
  city                  City?                  @relation(fields: [cityId], references: [id], onDelete: Cascade)
  userId                String                 @map("user_id")
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventCategoryId       String                 @map("category_id")
  eventCategory         Category               @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  joinedEventUsers      JoinedEventUser[]
  eventHosts            EventHost[]
  eventAssets           EventAsset[]
  eventLocationDetail   EventLocationDetail?
  eventPhases           EventPhase[]
  joinedEventPhaseUsers JoinedEventPhaseUser[]
  eventLinks            EventLink[]
  eventUserTemps        EventUserTemp[]
  eventTags             EventTags[]
  eventCities           EventCity[]
  eventSponsors         EventSponsor[]
  eventSocials          EventSocial[]
  userEventFavorites    UserEventFavorite[]
  eventFeedbacks        EventFeedback[]
  eventViews            EventView[]
  nftCollection         NftCollection?

  @@map("event")
}

model EventView {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityId    String?  @map("city_id")
  city      City?    @relation(fields: [cityId], references: [id], onDelete: Cascade)
  eventId   String   @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_view")
}

model EventFeedback {
  id          String   @id @unique @default(uuid())
  rate        Int      @map("rate")
  content     String
  createdDate DateTime @default(now()) @map("created_date")
  isDelete    Boolean  @default(false) @map("is_delete")
  eventId     String   @map("event_id")
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_feedback")
}

model EventSponsor {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  eventId     String  @map("event_id")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_sponsor")
}

model EventSocial {
  id          String @id @unique @default(uuid())
  channelName String @map("channel_name")
  url         String
  eventId     String @map("event_id")
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_social")
}

model EventPhase {
  id                    String                 @id @unique @default(uuid())
  title                 String
  description           String?
  order                 Int                    @default(1)
  eventId               String                 @map("event_id")
  event                 Event                  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  joinedEventPhaseUsers JoinedEventPhaseUser[]

  @@map("event_phase")
}

model EventLocationDetail {
  id        String @id @unique @default(uuid())
  latitude  String
  longitude String
  eventId   String @unique @map("event_id")
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_location_detail")
}

model EventHost {
  id              String         @id @unique @default(uuid())
  userId          String         @map("user_id")
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId         String         @map("event_id")
  event           Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  accepted        Boolean        @default(false)
  permission      HostPermission @default(MANAGER)
  invitedDate     DateTime       @default(now()) @map("invited_date")
  showOnEventPage Boolean        @default(true) @map("show_on_event_page")

  @@map("event_host")
}

model EventAsset {
  id      String         @id @unique @default(uuid())
  url     String
  type    EventAssetType
  eventId String         @map("event_id")
  event   Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_asset")
}

model EventLink {
  id      String @id @unique @default(uuid())
  title   String
  url     String
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_link")
}

model EventTags {
  id      String @id @unique @default(uuid())
  title   String
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_tags")
}

model UserEventFavorite {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  userId  String @map("user_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("user_event_favorite")
}

model JoinedEventUser {
  id          String                @id @unique @default(uuid())
  eventId     String                @map("event_id")
  userId      String                @map("user_id")
  knowEventBy String?               @map("know_event_by")
  joinDate    DateTime              @default(now()) @map("join_date")
  checkInDate DateTime?             @map("check_in_date")
  status      JoinedEventUserStatus @default(REGISTERED)
  checkedIn   Boolean               @default(false) @map("checked_in")
  event       Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("joined_event_user")
}

model JoinedEventPhaseUser {
  id           String     @id @unique @default(uuid())
  eventId      String     @map("event_id")
  userId       String     @map("user_id")
  eventPhaseId String     @map("event_phase_id")
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  EventPhase   EventPhase @relation(fields: [eventPhaseId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, eventPhaseId])
  @@map("joined_event_phase_user")
}

model EventUserTemp {
  id          String  @id @unique @default(uuid())
  email       String? @unique
  fullName    String  @map("full_name")
  company     String?
  jobTitle    String? @map("job_title")
  linkedInUrl String? @map("link_in_url")
  telegramId  String? @map("telegram_id")
  companyUrl  String? @map("company_url")
  knowEventBy String? @map("know_event_by")
  eventId     String  @map("event_id")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_user_temp")
}

model Notification {
  id               String             @id @unique @default(uuid())
  senderId         String             @map("sender_id")
  receiverId       String             @map("receiver_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  objectId         String             @map("object_id")
  title            String
  body             String
  isRead           Boolean            @default(false) @map("is_read")
  status           NotificationStatus @default(ACTIVE)
  notificationType NotificationType   @map("notification_type")

  sender   User @relation("SenderToReceiver", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverToSender", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model ImageBucket {
  id       Int      @id @unique @default(autoincrement())
  key      String   @unique
  url      String   @unique
  fileType FileType

  @@map("image_bucket")
}

model NftCollection {
  id                   String                   @id @unique @default(uuid())
  name                 String
  description          String
  image                String?
  coverImage           String?                  @map("cover_image")
  socialLinks          String[]                 @map("social_links")
  nftCollectionAddress String?                  @map("nft_collection_address")
  // use in case in Solana blockchain
  ownerAddress         String?                  @map("owner_address")
  royaltyPercent       Int                      @map("royalty_percent")
  royaltyAddress       String?                  @map("royalty_address")
  nextItemIndex        Int?                     @map("next_item_index")
  collectionContentUrl String?                  @map("collection_content_url")
  commonContentUrl     String?                  @map("common_content_url")
  error                Json?                    @map("error")
  blockchainType       BlockchainType?          @default(SOLANA) @map("blockchain_type")
  currentNFTIndex      Int?                     @default(0) @map("curent_nft_index")
  nftItems             NftItem[]
  statusOnChain        CollectionCreationStatus @default(PENDING) @map("status_onchain")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  eventId String? @unique @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("nft_collection")
}

model NftItem {
  id               String            @id @unique @default(uuid())
  itemOwnerAddress String?           @map("item_owner_address")
  itemIndex        Int?              @map("item_index")
  uri              String?           @map("uri")
  statusOnChain    NFTCreationStatus @default(PENDING) @map("status_onchain")
  nftName          String?           @map("nft_name")
  nftDescription   String?           @map("nft_description")
  nftImage         String?           @map("nft_image")
  nftAttributes    Json?             @map("nft_attributes")
  nftAddress       String?           @map("nft_address")
  error            Json?             @map("error")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  nftCollectionId String        @map("nft_collection_id")
  nftCollection   NftCollection @relation(fields: [nftCollectionId], references: [id], onDelete: Cascade)

  @@map("nft_item")
}

model RoyaltySolanaTokenLog {
  id                  String             @id @unique @default(uuid())
  eventName           String?            @map("event_name")
  ownerAddress        String?            @map("item_owner_address")
  tokenAccountAddress String?            @map("token_account_address")
  statusOnChain       RoyaltyTokenStatus @default(PENDING) @map("status_onchain")
  amount              Decimal?           @map("amount")
  error               Json?              @map("error")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("royalty_solana_token_log")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserCodeType {
  VERIFICATION
  PASSWORD_RESET
}

enum NotificationType {
  EVENT_INVITATION
  EVENT_LIKED
  EVENT_JOINED
  NEW_FOLLOWER
}

enum UserRole {
  USER
  ADMIN
}

enum EventAssetType {
  THUMBNAIL
  BACKGROUND
  IMAGE
  VIDEO
}

enum NotificationStatus {
  ACTIVE
  INACTIVE
}

enum EventType {
  NORMAL
  READONLY
}

enum EventScope {
  PUBLIC
  PRIVATE
  DEFAULT
}

enum TicketType {
  FREE
  APPROVAL
  PAYMENT
}

enum FileType {
  THUMBNAIL
  BACKGROUND
  IMAGE
  VIDEO
  USER_AVATAR
}

enum JoinedEventUserStatus {
  REGISTERED
  INVITED
  REJECTED
}

enum HostPermission {
  MANAGER
  CHECKIN
  NOT_MANAGER
  CREATOR
}

// Represent for status creattion colleciton nft in blockchain 
enum CollectionCreationStatus {
  SUCCESS
  PENDING
  FAILED
}

// Represent for status mint nft in blockchain
enum NFTCreationStatus {
  SUCCESS
  PENDING
  FAILED
}

// Represent for status mint nft in blockchain
enum RoyaltyTokenStatus {
  SUCCESS
  PENDING
  FAILED
}

enum SignatureType {
  TON
  SOLANA
}

enum BlockchainType {
  TON
  SOLANA
}
